// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// applyAmkatFilter
arma::uvec applyAmkatFilter(const arma::mat& y, const arma::mat& x);
RcppExport SEXP _AMKAT_applyAmkatFilter(SEXP ySEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(applyAmkatFilter(y, x));
    return rcpp_result_gen;
END_RCPP
}
// computeSampleRanks
arma::vec computeSampleRanks(const arma::vec& x);
RcppExport SEXP _AMKAT_computeSampleRanks(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(computeSampleRanks(x));
    return rcpp_result_gen;
END_RCPP
}
// estimateSignalToNoise
double estimateSignalToNoise(const arma::vec& y, double y_variance, const arma::mat& kernel_matrix);
RcppExport SEXP _AMKAT_estimateSignalToNoise(SEXP ySEXP, SEXP y_varianceSEXP, SEXP kernel_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type y_variance(y_varianceSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type kernel_matrix(kernel_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(estimateSignalToNoise(y, y_variance, kernel_matrix));
    return rcpp_result_gen;
END_RCPP
}
// generateKernelMatrix
arma::mat generateKernelMatrix(const arma::mat& x, const Rcpp::String& kernel_function);
RcppExport SEXP _AMKAT_generateKernelMatrix(SEXP xSEXP, SEXP kernel_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::String& >::type kernel_function(kernel_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(generateKernelMatrix(x, kernel_function));
    return rcpp_result_gen;
END_RCPP
}
// generatePermStats
arma::vec generatePermStats(const arma::mat& y, const arma::vec& y_variances, const arma::mat& x, const Rcpp::CharacterVector& candidate_kernels, int num_permutations);
RcppExport SEXP _AMKAT_generatePermStats(SEXP ySEXP, SEXP y_variancesSEXP, SEXP xSEXP, SEXP candidate_kernelsSEXP, SEXP num_permutationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_variances(y_variancesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type candidate_kernels(candidate_kernelsSEXP);
    Rcpp::traits::input_parameter< int >::type num_permutations(num_permutationsSEXP);
    rcpp_result_gen = Rcpp::wrap(generatePermStats(y, y_variances, x, candidate_kernels, num_permutations));
    return rcpp_result_gen;
END_RCPP
}
// generatePermStatsNoFilter
arma::vec generatePermStatsNoFilter(const arma::mat& y, const arma::vec& y_variances, const arma::mat& x, const Rcpp::CharacterVector& candidate_kernels, int num_permutations);
RcppExport SEXP _AMKAT_generatePermStatsNoFilter(SEXP ySEXP, SEXP y_variancesSEXP, SEXP xSEXP, SEXP candidate_kernelsSEXP, SEXP num_permutationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_variances(y_variancesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type candidate_kernels(candidate_kernelsSEXP);
    Rcpp::traits::input_parameter< int >::type num_permutations(num_permutationsSEXP);
    rcpp_result_gen = Rcpp::wrap(generatePermStatsNoFilter(y, y_variances, x, candidate_kernels, num_permutations));
    return rcpp_result_gen;
END_RCPP
}
// generateTestStat
Rcpp::List generateTestStat(const arma::mat& y, const arma::vec& y_variances, const arma::mat& x, const Rcpp::CharacterVector& candidate_kernels);
RcppExport SEXP _AMKAT_generateTestStat(SEXP ySEXP, SEXP y_variancesSEXP, SEXP xSEXP, SEXP candidate_kernelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_variances(y_variancesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type candidate_kernels(candidate_kernelsSEXP);
    rcpp_result_gen = Rcpp::wrap(generateTestStat(y, y_variances, x, candidate_kernels));
    return rcpp_result_gen;
END_RCPP
}
// generateTestStatMultiple
arma::vec generateTestStatMultiple(const arma::mat& y, const arma::vec& y_variances, const arma::mat& x, const Rcpp::CharacterVector& candidate_kernels, int num_test_statistics);
RcppExport SEXP _AMKAT_generateTestStatMultiple(SEXP ySEXP, SEXP y_variancesSEXP, SEXP xSEXP, SEXP candidate_kernelsSEXP, SEXP num_test_statisticsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_variances(y_variancesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type candidate_kernels(candidate_kernelsSEXP);
    Rcpp::traits::input_parameter< int >::type num_test_statistics(num_test_statisticsSEXP);
    rcpp_result_gen = Rcpp::wrap(generateTestStatMultiple(y, y_variances, x, candidate_kernels, num_test_statistics));
    return rcpp_result_gen;
END_RCPP
}
// generateTestStatNoFilter
Rcpp::List generateTestStatNoFilter(const arma::mat& y, const arma::vec& y_variances, const arma::mat& x, const Rcpp::CharacterVector& candidate_kernels);
RcppExport SEXP _AMKAT_generateTestStatNoFilter(SEXP ySEXP, SEXP y_variancesSEXP, SEXP xSEXP, SEXP candidate_kernelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_variances(y_variancesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type candidate_kernels(candidate_kernelsSEXP);
    rcpp_result_gen = Rcpp::wrap(generateTestStatNoFilter(y, y_variances, x, candidate_kernels));
    return rcpp_result_gen;
END_RCPP
}
// generateTestStatsAllResults
Rcpp::List generateTestStatsAllResults(const arma::mat& y, const arma::vec& y_variances, const arma::mat& x, const Rcpp::CharacterVector& candidate_kernels, int num_test_statistics);
RcppExport SEXP _AMKAT_generateTestStatsAllResults(SEXP ySEXP, SEXP y_variancesSEXP, SEXP xSEXP, SEXP candidate_kernelsSEXP, SEXP num_test_statisticsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_variances(y_variancesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type candidate_kernels(candidate_kernelsSEXP);
    Rcpp::traits::input_parameter< int >::type num_test_statistics(num_test_statisticsSEXP);
    rcpp_result_gen = Rcpp::wrap(generateTestStatsAllResults(y, y_variances, x, candidate_kernels, num_test_statistics));
    return rcpp_result_gen;
END_RCPP
}
// getTailAreaSpearmanRho
double getTailAreaSpearmanRho(double q, int n, int ltail);
RcppExport SEXP _AMKAT_getTailAreaSpearmanRho(SEXP qSEXP, SEXP nSEXP, SEXP ltailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type ltail(ltailSEXP);
    rcpp_result_gen = Rcpp::wrap(getTailAreaSpearmanRho(q, n, ltail));
    return rcpp_result_gen;
END_RCPP
}
// testSpearmanRho
double testSpearmanRho(const arma::vec& x, const arma::vec& y);
RcppExport SEXP _AMKAT_testSpearmanRho(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(testSpearmanRho(x, y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_AMKAT_applyAmkatFilter", (DL_FUNC) &_AMKAT_applyAmkatFilter, 2},
    {"_AMKAT_computeSampleRanks", (DL_FUNC) &_AMKAT_computeSampleRanks, 1},
    {"_AMKAT_estimateSignalToNoise", (DL_FUNC) &_AMKAT_estimateSignalToNoise, 3},
    {"_AMKAT_generateKernelMatrix", (DL_FUNC) &_AMKAT_generateKernelMatrix, 2},
    {"_AMKAT_generatePermStats", (DL_FUNC) &_AMKAT_generatePermStats, 5},
    {"_AMKAT_generatePermStatsNoFilter", (DL_FUNC) &_AMKAT_generatePermStatsNoFilter, 5},
    {"_AMKAT_generateTestStat", (DL_FUNC) &_AMKAT_generateTestStat, 4},
    {"_AMKAT_generateTestStatMultiple", (DL_FUNC) &_AMKAT_generateTestStatMultiple, 5},
    {"_AMKAT_generateTestStatNoFilter", (DL_FUNC) &_AMKAT_generateTestStatNoFilter, 4},
    {"_AMKAT_generateTestStatsAllResults", (DL_FUNC) &_AMKAT_generateTestStatsAllResults, 5},
    {"_AMKAT_getTailAreaSpearmanRho", (DL_FUNC) &_AMKAT_getTailAreaSpearmanRho, 3},
    {"_AMKAT_testSpearmanRho", (DL_FUNC) &_AMKAT_testSpearmanRho, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_AMKAT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
    R_forceSymbols(dll, TRUE);
}
